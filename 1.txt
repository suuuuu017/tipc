DEBUG: initial interval range state for function define i64 @_tip_main() {
entry:
  br label %header1

header1:                                          ; preds = %body1, %entry
  %y.0 = phi i64 [ -238497894, %entry ], [ %subtmp, %body1 ]
  %x.0 = phi i64 [ 238497894, %entry ], [ %multmp, %body1 ]
  %gttmp = icmp sgt i64 %x.0, 0
  %loopcond = icmp ne i1 %gttmp, false
  br i1 %loopcond, label %body1, label %exit1

body1:                                            ; preds = %header1
  %multmp = mul i64 %x.0, 10
  %subtmp = sub i64 %y.0, %multmp
  br label %header1

exit1:                                            ; preds = %header1
  call void @llvm.donothing()
  %addtmp = add i64 %x.0, %y.0
  ret i64 %addtmp
}

-->  %gttmp = icmp sgt i64 %x.0, 0 = [+inf,-inf]
-->  %loopcond = icmp ne i1 %gttmp, false = [+inf,-inf]
-->  %multmp = mul i64 %x.0, 10 = [+inf,-inf]
-->  %y.0 = phi i64 [ -238497894, %entry ], [ %subtmp, %body1 ] = [+inf,-inf]
-->  call void @llvm.donothing() = [+inf,-inf]
-->  %subtmp = sub i64 %y.0, %multmp = [+inf,-inf]
-->  %x.0 = phi i64 [ 238497894, %entry ], [ %multmp, %body1 ] = [+inf,-inf]
-->  %addtmp = add i64 %x.0, %y.0 = [+inf,-inf]
DEBUG: initial worklist
-->-238497894
-->238497894
-->0
-->0
-->10
-2147483648 -238497894 0 10 238497894 2147483647 DEBUG: merging values at node 0x6000039bbc58
--> phi[0] with lub([+inf,-inf], [-238497894,-238497894]) = [-238497894,-238497894]
--> phi[1] with lub([-238497894,-238497894], [+inf,-inf]) = [-238497894,-238497894]
DEBUG: analyzing   %y.0 = phi i64 [ -238497894, %entry ], [ %subtmp, %body1 ]
--> old value = [+inf,-inf]
--> new value  =-238497894 -238497894
DEBUG: merging values at node 0x6000039bbbb8
--> phi[0] with lub([+inf,-inf], [238497894,238497894]) = [238497894,238497894]
--> phi[1] with lub([238497894,238497894], [+inf,-inf]) = [238497894,238497894]
DEBUG: analyzing   %x.0 = phi i64 [ 238497894, %entry ], [ %multmp, %body1 ]
--> old value = [+inf,-inf]
--> new value  =238497894 238497894
DEBUG: analyzing   %gttmp = icmp sgt i64 %x.0, 0
--> old value = [+inf,-inf]
--> new value  =0 1
DEBUG: analyzing   %loopcond = icmp ne i1 %gttmp, false
--> old value = [+inf,-inf]
--> new value  =0 1
low is 2147483647
DEBUG: analyzing   %multmp = mul i64 %x.0, 10
--> old value = [+inf,-inf]
--> new value  =2147483647 2147483647
DEBUG: adding to worklist :  %x.0 = phi i64 [ 238497894, %entry ], [ %multmp, %body1 ]
DEBUG: analyzing   %subtmp = sub i64 %y.0, %multmp
--> old value = [+inf,-inf]
--> new value  =-2147483648 -2147483648
DEBUG: adding to worklist :  %y.0 = phi i64 [ -238497894, %entry ], [ %subtmp, %body1 ]
DEBUG: analyzing   call void @llvm.donothing()
--> old value = [+inf,-inf]
--> new value  =-2147483648 2147483647
DEBUG: analyzing   %addtmp = add i64 %x.0, %y.0
--> old value = [+inf,-inf]
--> new value  =0 0
DEBUG: merging values at node 0x6000039bbbb8
--> phi[0] with lub([+inf,-inf], [238497894,238497894]) = [238497894,238497894]
--> phi[1] with lub([238497894,238497894], [+inf,+inf]) = [238497894,+inf]
DEBUG: analyzing   %x.0 = phi i64 [ 238497894, %entry ], [ %multmp, %body1 ]
--> old value = [238497894,238497894]
--> new value  =238497894 2147483647
DEBUG: adding to worklist :  %addtmp = add i64 %x.0, %y.0
DEBUG: adding to worklist :  %multmp = mul i64 %x.0, 10
DEBUG: adding to worklist :  %gttmp = icmp sgt i64 %x.0, 0
DEBUG: merging values at node 0x6000039bbc58
--> phi[0] with lub([+inf,-inf], [-238497894,-238497894]) = [-238497894,-238497894]
--> phi[1] with lub([-238497894,-238497894], [-inf,-inf]) = [-inf,-238497894]
DEBUG: analyzing   %y.0 = phi i64 [ -238497894, %entry ], [ %subtmp, %body1 ]
--> old value = [-238497894,-238497894]
--> new value  =-2147483648 -238497894
DEBUG: adding to worklist :  %subtmp = sub i64 %y.0, %multmp
DEBUG: analyzing   %addtmp = add i64 %x.0, %y.0
--> old value = [0,0]
--> new value  =-2147483648 2147483647
low is 2147483647
DEBUG: analyzing   %multmp = mul i64 %x.0, 10
--> old value = [+inf,+inf]
--> new value  =2147483647 2147483647
DEBUG: analyzing   %gttmp = icmp sgt i64 %x.0, 0
--> old value = [0,10]
--> new value  =0 1
DEBUG: adding to worklist :  %loopcond = icmp ne i1 %gttmp, false
DEBUG: analyzing   %subtmp = sub i64 %y.0, %multmp
--> old value = [-inf,-inf]
--> new value  =-2147483648 -2147483648
DEBUG: analyzing   %loopcond = icmp ne i1 %gttmp, false
--> old value = [0,10]
--> new value  =0 1
*** interval range analysis for function define i64 @_tip_main() {
entry:
  br label %header1

header1:                                          ; preds = %body1, %entry
  %y.0 = phi i64 [ -238497894, %entry ], [ %subtmp, %body1 ]
  %x.0 = phi i64 [ 238497894, %entry ], [ %multmp, %body1 ]
  %gttmp = icmp sgt i64 %x.0, 0
  %loopcond = icmp ne i1 %gttmp, false
  br i1 %loopcond, label %body1, label %exit1

body1:                                            ; preds = %header1
  %multmp = mul i64 %x.0, 10
  %subtmp = sub i64 %y.0, %multmp
  br label %header1

exit1:                                            ; preds = %header1
  call void @llvm.donothing()
  %addtmp = add i64 %x.0, %y.0
  ret i64 %addtmp
}
 ***
  %gttmp = icmp sgt i64 %x.0, 0 = [0,10]
  %loopcond = icmp ne i1 %gttmp, false = [0,10]
  %multmp = mul i64 %x.0, 10 = [+inf,+inf]
  %y.0 = phi i64 [ -238497894, %entry ], [ %subtmp, %body1 ] = [-inf,-238497894]
  call void @llvm.donothing() = [-inf,+inf]
  %subtmp = sub i64 %y.0, %multmp = [-inf,-inf]
  %x.0 = phi i64 [ 238497894, %entry ], [ %multmp, %body1 ] = [238497894,+inf]
  %addtmp = add i64 %x.0, %y.0 = [-inf,+inf]
